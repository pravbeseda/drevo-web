name: Deploy to Production

on:
  push:
    tags: ['v*']

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build for production
        env:
          APP_VERSION: ${{ steps.get_version.outputs.version }}
        run: npx nx build client --configuration=production --base-href=/new/

      - name: Deploy with reusable action
        uses: ./.github/actions/deploy
        with:
          environment: 'production'
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          ssh-user: ${{ secrets.SSH_USER }}
          ssh-host: ${{ secrets.SSH_HOST }}
          ssh-port: ${{ secrets.SSH_PORT || '22' }}
          source-path: 'dist/apps/client'
          target-path: 'production'
          environment-url: ${{ vars.PRODUCTION_URL }}
          version: ${{ steps.get_version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            üöÄ **Production Release ${{ steps.get_version.outputs.version }}**
            
            **Deployed**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            **Environment**: Production
            **URL**: ${{ vars.PRODUCTION_URL }}
            
            **Changes in this release:**
            - See commit history for detailed changes
            
            **Deployment**: ‚úÖ Files deployed successfully
          draft: false
          prerelease: false

      - name: Notify deployment
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment successful: ${{ vars.PRODUCTION_URL }}"
            echo "üéâ Release ${{ steps.get_version.outputs.version }} is live!"
          else
            echo "‚ùå Production deployment failed"
            echo "üö® Manual intervention required"
            exit 1
          fi