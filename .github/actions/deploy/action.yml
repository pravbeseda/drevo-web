name: 'Deploy to Server'
description: 'Deploy using SSH and rsync with verification'
author: 'Drevo CI/CD'

inputs:
  environment:
    description: 'Target environment (staging/production)'
    required: true
  ssh-private-key:
    description: 'SSH private key for deployment'
    required: true
  ssh-known-hosts:
    description: 'SSH known hosts'
    required: true
  ssh-user:
    description: 'SSH user for deployment'
    required: true
  ssh-host:
    description: 'SSH host for deployment'
    required: true
  ssh-port:
    description: 'SSH port for deployment'
    required: false
    default: '22'
  source-path:
    description: 'Source path to deploy from'
    required: true
    default: 'dist/apps/client'
  target-path:
    description: 'Target path on server (relative to user home)'
    required: true
  environment-url:
    description: 'Environment URL for notifications'
    required: false
  version:
    description: 'Release version (required parameter)'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup SSH for deployment
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ inputs.ssh-private-key }}
        known_hosts: ${{ inputs.ssh-known-hosts }}

    - name: Copy deployment scripts
      shell: bash
      run: |
        echo "📝 Copying deployment scripts..."
        scp -P ${{ inputs.ssh-port }} \
          scripts/deploy.sh scripts/ecosystem.config.js \
          ${{ inputs.ssh-user }}@${{ inputs.ssh-host }}:~/
        ssh -p ${{ inputs.ssh-port }} \
          ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} \
          "chmod +x ~/deploy.sh"
        echo "✅ Deployment scripts ready"

    - name: Create release directory
      shell: bash
      run: |
        echo "� Creating release directory for ${{ inputs.environment }}/${{ inputs.version }}..."
        ssh -p ${{ inputs.ssh-port }} \
          ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} \
          "mkdir -p ~/releases/${{ inputs.environment }}/${{ inputs.version }}/"
        echo "✅ Release directory created"

    - name: Deploy to ${{ inputs.environment }}
      shell: bash
      run: |
        echo "🚀 Deploying to ${{ inputs.environment }} environment..."
        echo "📦 Version: ${{ inputs.version }}"
        
        # Deploy using rsync to versioned folder
        rsync -avz --delete \
          -e "ssh -p ${{ inputs.ssh-port }}" \
          ${{ inputs.source-path }}/ \
          ${{ inputs.ssh-user }}@${{ inputs.ssh-host }}:releases/${{ inputs.environment }}/${{ inputs.version }}/
        
        echo "✅ Files deployed to versioned directory"

    - name: Execute deployment script
      shell: bash
      run: |
        echo "⚡ Executing atomic deployment..."
        ssh -p ${{ inputs.ssh-port }} \
          ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} \
          "~/deploy.sh ${{ inputs.environment }} ${{ inputs.version }}"
        echo "✅ Atomic deployment completed"

    - name: Verify deployment
      shell: bash
      run: |
        echo "🔍 Verifying deployment..."
        ssh -p ${{ inputs.ssh-port }} \
          ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} \
          "if [ -L ~/releases/${{ inputs.environment }}-current ]; then ls -la ~/releases/${{ inputs.environment }}-current && readlink ~/releases/${{ inputs.environment }}-current; else echo 'Symlink ~/releases/${{ inputs.environment }}-current does not exist'; fi"
        echo "✅ Deployment verification completed"

    - name: Notify deployment success
      shell: bash
      run: |
        echo "✅ ${{ inputs.environment }} deployment successful"
        if [ -n "${{ inputs.environment-url }}" ]; then
          echo "🌐 URL: ${{ inputs.environment-url }}"
        fi
        echo "🎉 Release ${{ inputs.version }} is live!"