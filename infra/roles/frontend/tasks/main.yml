---
# Frontend role tasks

- name: Install prerequisites
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: true

- name: Download NodeSource setup script
  ansible.builtin.get_url:
    url: "https://deb.nodesource.com/setup_{{ frontend_nodejs_version }}"
    dest: "/tmp/nodesource_setup.sh"
    mode: "0755"

- name: Run NodeSource setup script
  ansible.builtin.shell: |
    /tmp/nodesource_setup.sh
  args:
    creates: /etc/apt/sources.list.d/nodesource.list

- name: Install Node.js
  ansible.builtin.apt:
    name: nodejs
    state: present
    update_cache: true

- name: Check Node.js version
  ansible.builtin.command: node --version
  register: node_version_output
  changed_when: false

- name: Debug Node.js version
  ansible.builtin.debug:
    var: node_version_output.stdout

- name: Install serve package globally
  ansible.builtin.command: npm install -g serve@latest
  args:
    creates: /usr/bin/serve
  register: serve_install
  changed_when: serve_install.rc == 0

- name: Get serve binary location
  ansible.builtin.command: which serve
  register: serve_path
  changed_when: false

- name: Debug serve path
  ansible.builtin.debug:
    var: serve_path.stdout

- name: Install PM2 globally
  ansible.builtin.command: npm install -g pm2@{{ frontend_pm2_version }}
  args:
    creates: /usr/bin/pm2
  register: pm2_install
  changed_when: pm2_install.rc == 0

- name: Check PM2 version
  ansible.builtin.command: pm2 --version
  register: pm2_version_output
  changed_when: false

- name: Debug PM2 version
  ansible.builtin.debug:
    var: pm2_version_output.stdout

- name: Create application directory
  ansible.builtin.file:
    path: "{{ frontend_app_dir }}"
    state: directory
    owner: "{{ frontend_app_user }}"
    group: "{{ frontend_app_group }}"
    mode: '0755'

- name: Create empty index.html if no frontend files exist
  ansible.builtin.copy:
    content: |
      <!DOCTYPE html>
      <html>
      <head>
        <title>Frontend Application</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
          h1 { color: #333; }
          p { color: #666; }
        </style>
      </head>
      <body>
        <h1>Frontend Application</h1>
        <p>This is a placeholder page. Your application will be deployed here.</p>
        <p>Node.js version: {{ frontend_nodejs_version }}</p>
      </body>
      </html>
    dest: "{{ frontend_app_dir }}/index.html"
    owner: "{{ frontend_app_user }}"
    group: "{{ frontend_app_group }}"
    mode: '0644'
  when: not (frontend_app_files_exist | default(false))

- name: Verify Node.js version
  ansible.builtin.shell: |
    set -o pipefail
    node --version | grep -q "v22"
  args:
    executable: /bin/bash
  register: node_version_check
  changed_when: false
  failed_when: node_version_check.rc != 0
  ignore_errors: false

- name: Create logs directory
  ansible.builtin.file:
    path: "{{ frontend_app_dir }}/logs"
    state: directory
    owner: "{{ frontend_app_user }}"
    group: "{{ frontend_app_group }}"
    mode: "0755"

- name: Ensure PM2 home directory exists
  ansible.builtin.file:
    path: "{{ frontend_app_dir }}/.pm2"
    state: directory
    owner: "{{ frontend_app_user }}"
    group: "{{ frontend_app_group }}"
    mode: "0755"

- name: Copy PM2 ecosystem configuration
  ansible.builtin.template:
    src: ecosystem.config.js.j2
    dest: "{{ frontend_app_dir }}/ecosystem.config.js"
    owner: "{{ frontend_app_user }}"
    group: "{{ frontend_app_group }}"
    mode: "0644"
  notify: Restart Frontend

- name: Create PM2 systemd service
  ansible.builtin.template:
    src: pm2.service.j2
    dest: /etc/systemd/system/pm2-{{ frontend_app_name }}.service
    owner: root
    group: root
    mode: "0644"
  when: ansible_service_mgr == 'systemd'

- name: Reload systemd for PM2 service
  ansible.builtin.systemd:
    daemon_reload: true
  when: ansible_service_mgr == 'systemd'

- name: Start and enable PM2 service
  ansible.builtin.service:
    name: "pm2-{{ frontend_app_name }}"
    state: started
    enabled: true
  register: pm2_service_result
  when: ansible_service_mgr == 'systemd'
  ignore_errors: true

- name: Get PM2 service status on failure
  ansible.builtin.command: systemctl status pm2-{{ frontend_app_name }}
  register: pm2_status
  when: 
    - ansible_service_mgr == 'systemd'
    - pm2_service_result is defined 
    - pm2_service_result.failed is defined
    - pm2_service_result.failed
  ignore_errors: true

- name: Get PM2 service journal logs on failure
  ansible.builtin.command: journalctl -xeu pm2-{{ frontend_app_name }} -n 50
  register: pm2_journal
  when: 
    - ansible_service_mgr == 'systemd'
    - pm2_service_result is defined 
    - pm2_service_result.failed is defined
    - pm2_service_result.failed
  ignore_errors: true

- name: Show PM2 service status on failure
  ansible.builtin.debug:
    var: pm2_status.stdout_lines
  when: pm2_status is defined and pm2_status.stdout_lines is defined

- name: Show PM2 service journal logs on failure
  ansible.builtin.debug:
    var: pm2_journal.stdout_lines
  when: pm2_journal is defined and pm2_journal.stdout_lines is defined
